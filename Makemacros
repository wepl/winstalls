#
# Makefile macros for WHDLoad Slaves
# supports basm/vasm on Amiga/MacOS/Linux
# supported targets:
#			build Slave (default)
#	dest		copy Slave/ReadMe to install directory for testing
#	img		build RawDIC Slave
#	inst		build install package
#	arc		build install package archive
#	rel		copy install archive to release location
#	clean		remove all generated artefacts
#
# $@ target
# $< first dependency
# $^ all dependencies

# enable a non-debug assemble:
# 'setenv DEBUG=0' or 'make DEBUG=0'

# save all vars here to print new created ones later
VARS_OLD := $(.VARIABLES)

INCLUDE=../../include
SOURCES=../../sources

# different commands for build under Amiga or Vamos
ifdef AMIGA

# basm options: -x+ = use cachefile.library -s1+ = create SAS/D1 debug hunks -sa+ = create symbol hunks
BASMOPT=-x+ -i//include -i//sources
BASMOPTDBG=-sa+
VASMOPT=-I//include -I//sources
# vincludeos3: must before netinclude: because broken netinclude
CFLAGS=-Ivincludeos3: -Inetinclude:
CP=Copy
DATE=wdate >.date
LHA=lha -Fr a
LHAX=lha x
MKDIR=Makedir
RM=Delete All

# on Amiga default=DEBUG
ifndef DEBUG
DEBUG=1
endif

else

# basm options: -x- = don't use cachefile.library -sa+ = create symbol hunks
BASMOPT=-x- -i//include -i//sources
BASMOPTDBG=-sa+
VASMOPT=-I$(INCLUDE) -I$(SOURCES)
CFLAGS=-I$(VBCC)/targets/m68k-amigaos/include -I$(INCLUDE)
CP=cp -R
DATE=date "+(%d.%m.%Y)" | xargs printf >.date
LHA=lha c1o6
LHAX=lha x
MKDIR=mkdir
RM=rm -fr
VAMOS=vamos -qC68020 -m4096 -s128 --

# on Vamos default=NoDEBUG
ifndef DEBUG
DEBUG=0
endif

endif

ifeq ($(DEBUG),1)

# Debug options
# ASM creates executables, ASMB binary files, ASMO object files
# BASM: -H to show all unused Symbols/Labels, requires -OG-
ASM=$(VAMOS) basm -v+ $(BASMOPT) $(BASMOPTDBG) -O+ -ODc- -ODd- -wo- -dDEBUG=1
ASMB=$(ASM)
ASMO=$(ASM)
ASMDEF=-d
ASMOUT=-o
CC=vc -c99 -g -I. $(CFLAGS) -DOS_AMIGAOS -DDEBUG -sc

else

# normal options
# VASM: -wfail -warncomm -databss
ASMBASE=vasmm68k_mot $(VASMOPT) -ignore-mult-inc -nosym -quiet -wfail -opt-allbra -opt-clr -opt-lsl -opt-nmoveq -opt-pea -opt-size -opt-st -ldots
ASM=$(ASMBASE) -Fhunkexe
ASMB=$(ASMBASE) -Fbin
ASMO=$(ASMBASE) -Fhunk
ASMDEF=-D
ASMOUT=-o 
CC=vc -c99 -g -I. $(CFLAGS) -DOS_AMIGAOS -O2 -size -sc

endif

# general programs
RELOC=$(VAMOS) Reloc
LN=vlink -bamigahunk -Bstatic -Cvbcc -nostdlib -s -Rstd -sc -o
MKINFO=perl ../../bin/mkinfo
MKINSTALL=perl ../../bin/mkinstall

# lower case function
lc = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$1))))))))))))))))))))))))))

#
# variable definitions
#
BASE ?= $(notdir $(CURDIR))
SLAVE ?= $(BASE).Slave
# keep filename length in FFS limits, SLAVE may contain multiple filenames!
SLAVELENCHK := $(shell perl -e 'foreach (@ARGV) { length($$_) > 30 and print "length($$_)=" . length($$_) . " > 30 chars!\n" and exit }; print "ok"' $(SLAVE))
ifneq ($(SLAVELENCHK),ok)
$(error $(SLAVELENCHK))
endif
# determine name of Slave source if not yet set
ifneq ("$(wildcard $(BASE).asm)","")
	SLAVESRC ?= $(BASE).asm
endif
ifneq ("$(wildcard $(call lc,$(BASE)).asm)","")
	SLAVESRC ?= $(call lc,$(BASE)).asm
endif
ifneq ("$(wildcard $(basename $(SLAVE)).asm)","")
	SLAVESRC ?= $(basename $(SLAVE)).asm
endif
ifneq ("$(wildcard $(basename $(SLAVE)).s)","")
	SLAVESRC ?= $(basename $(SLAVE)).s
endif
ifndef SLAVESRC
$(error variable SLAVESRC could not be determined and is not set)
endif
# determine name of RawDIC Slave source if not yet set
ifneq ("$(wildcard $(BASE).islave.asm)","")
	ISLAVESRC ?= $(BASE).islave.asm
endif
ifneq ("$(wildcard $(call lc,$(BASE)).islave.asm)","")
	ISLAVESRC ?= $(call lc,$(BASE)).islave.asm
endif
ifneq ("$(wildcard $(BASE).islave.s)","")
	ISLAVESRC ?= $(BASE).islave.s
endif
ifdef ISLAVESRC
	ISLAVE ?= $(BASE).ISlave
endif
# determine name of install directory if not yet set
ifdef NOINSTALL
	INSTDIR ?= $(BASE)
else
	INSTDIR ?= $(BASE)\ Install
endif

#
# default target: build Slave
#
ifndef NOSLAVERULE
$(SLAVE) : $(SLAVESRC)
	$(DATE)
	$(ASM) $(ASMOUT)$@ $<
endif

#
# target: build RawDIC Slave
#
img : $(ISLAVE)
$(ISLAVE) : $(ISLAVESRC)
	$(DATE)
	$(ASM) $(ASMOUT)$@ $<

#
# target: build install package files
#
# location of install template
INSTTPLBASE := ../../inst
INSTTPLDIRICON := $(INSTTPLBASE)/Xxx\ Install.info
INSTTPLINSTALL := $(INSTTPLBASE)/Install
INSTTPLINSTALLICON := $(INSTTPLBASE)/Install.info
INSTTPLREADMEICON := $(INSTTPLBASE)/ReadMe.info
INSTDIRICON := $(INSTDIR).info
ifndef NOINSTALL
INSTALL := $(INSTDIR)/Install
INSTALLPREP := inst/install.prep
INSTALLICON := $(INSTDIR)/Install.info
endif
INSTREADME := inst/ReadMe
INSTALLREADME := $(INSTDIR)/ReadMe
INSTALLREADMEICON := $(INSTDIR)/ReadMe.info
# these are the icons to be renamed by Install and the ones to be just copied!
INSTICONS := $(wildcard inst/*.inf inst/*.rom* inst/*.new* inst/*.col* inst/*.box* inst/*.info)
INSTALLICONS := $(addprefix $(INSTDIR)/, $(notdir $(INSTICONS)))
INSTALLSLAVE := $(foreach file,$(SLAVE),$(INSTDIR)/$(file))
ifdef ISLAVE
INSTALLISLAVE := $(INSTDIR)/$(ISLAVE)
endif
# additional files to be copied
# referenced in the install.prep
ifneq ($(wildcard $(INSTALLPREP)),)
INSTFILESMORE := $(foreach file,$(shell perl -ne '/^\#\w+-file=(.*)/ and !/last-file=/ and print "$$1\n"' < $(INSTALLPREP)),inst/$(file))
endif
# add ones specified in the Makefile
ifdef INSTFILES
INSTFILESMORE += $(foreach file,$(INSTFILES),$(wildcard inst/$(file)))
endif
ifneq ($(INSTFILESMORE),)
INSTALLFILESMORE := $(foreach file,$(INSTFILESMORE),$(INSTDIR)/$(notdir $(file)))
$(INSTALLFILESMORE) : $(INSTFILESMORE)
	$(CP) $^ $(INSTDIR)
endif
ifneq ($(GENFILES),)
INSTALLGENFILES := $(foreach file,$(GENFILES),$(INSTDIR)/$(notdir $(file)))
$(INSTALLGENFILES) : $(GENFILES)
	$(CP) $^ $(INSTDIR)
endif
# ReadMe
INSTREADME := inst/ReadMe
# we have decided to not include sources anymore, instead link to github in ReadMe
#INSTALLSRCDIR := $(INSTDIR)/src
#INSTALLSRCSLAVE := $(INSTDIR)/src/$(SLAVESRC)
$(INSTDIR) :
	$(MKDIR) '$@'
$(INSTDIRICON) :
	$(CP) $(INSTTPLDIRICON) '$@'
$(INSTALL) : $(INSTTPLINSTALL) $(INSTALLPREP)
	$(MKINSTALL) $^ '$@'
$(INSTALLICON) : $(INSTTPLINSTALLICON)
	$(MKINFO) $< '$@' APPNAME=$(BASE)
$(INSTALLREADME) : $(INSTREADME)
	$(CP) $< '$@'
$(INSTALLREADMEICON) : $(INSTTPLREADMEICON)
	$(CP) $< '$@'
# $(info INSTALLICONS=$(INSTALLICONS))
$(INSTALLICONS) : $(INSTICONS)
	$(CP) $^ $(INSTDIR)
# $(info INSTALLSLAVE=$(INSTALLSLAVE))
$(INSTALLSLAVE) : $(SLAVE)
	$(CP) $^ $(INSTDIR)
$(INSTALLISLAVE) : $(ISLAVE)
	$(CP) $< '$@'
$(INSTALLSRCDIR) :
	$(MKDIR) '$@'
$(INSTALLSRCSLAVE) : $(SLAVESRC)
	$(CP) $< '$@'
INSTALLFILES = $(INSTDIR) $(INSTDIRICON) $(INSTALL) $(INSTALLICON) $(INSTALLREADME) $(INSTALLREADMEICON) $(INSTALLICONS) \
	$(INSTALLSLAVE) $(INSTALLISLAVE) $(INSTALLFILESMORE) $(INSTALLGENFILES) $(INSTALLSRCDIR) $(INSTALLSRCSLAVE)
inst : $(INSTALLFILES)

#
# target: build install package archive
#
INSTALLARCHIVE := $(BASE).lha
$(INSTALLARCHIVE) : $(INSTALLFILES)
	$(RM) $@
	$(LHA) $@ $(INSTDIR) $(INSTDIRICON)
arc : $(INSTALLARCHIVE)

#
# target: copy Slave/ReadMe to installed location for testing
#
dest : $(SLAVE) $(INSTREADME)
	$(CP) $^ $(DEST)

#
# target: copy archive to release
# requires proper .ssh/config
#
rel : $(INSTALLARCHIVE)
	scp $< rel:

#
# target: copy archive to wepl
# requires proper .ssh/config
#
wepl : $(INSTALLARCHIVE)
	scp $< juno:

#
# target: retrieve install archive from whdload web page and unarchive it
# update timestamp of Slave source to avoid rebuild
#
get :
	$(RM) $(INSTALLARCHIVE)
	wget whdload.de/$(notdir $(patsubst %/,%,$(dir $(CURDIR))))/$(INSTALLARCHIVE)
	$(LHAX) $(INSTALLARCHIVE)
	$(CP) $(INSTALLSLAVE) $(SLAVE)
	touch -r $(INSTALLSLAVE) $(SLAVESRC) $(SLAVE)

#
# generic rules
#

%.abs : %.exe
	$(RELOC) ADR=0 $< $@ FailRelocs

%.o : %.s
	${ASMO} $(ASMOUT)$@ $<

%.o : %.c
	$(CC) -o $@ -c $<

#
# generic targets
#

clean :
	$(RM) .date $(SLAVE) $(ISLAVE) $(GENFILES) $(INSTDIR) $(INSTDIRICON) $(INSTALLARCHIVE) *.bak

#
# targets to always build
#
.PHONY : dest get img inst arc rel wepl clean

# debugging: print all make variables defined between saving vars to VARS_OLD and here
#$(foreach v,$(sort $(filter-out $(VARS_OLD) VARS_OLD,$(.VARIABLES))),$(info $(v) = $($(v))))

